// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function printTitle(title) {
    const border = '========================';
    console.log(`\n${border}`);
    console.log(`     ${title}`);
    console.log(`${border}\n`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
function printDivider() {
    console.log('----------------------------------------');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è
function printAction(action) {
    console.log(`* ${action}`);
}

// –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –ú–æ–≥—É—á–∏—Ö –†–µ–π–Ω–¥–∂–µ—Ä–æ–≤
printTitle("–ú–æ–≥—É—á–∏–µ –†–µ–π–Ω–¥–∂–µ—Ä—ã: –ó–∞—â–∏—Ç–∞ –ó–µ–º–ª–∏");
console.log("–î–∞–≤–Ω—ã–º-–¥–∞–≤–Ω–æ, –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π —Ü–∞—Ä–∏–ª–æ –∑–ª–æ. –í—Ä–∞–≥–∏, –∑–∞—Ö–≤–∞—Ç–∏–≤—à–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–∏—Ä–æ–≤, –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–æ –ó–µ–º–ª–∏. –ù–æ —à–µ—Å—Ç–µ—Ä–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–ª–∏ –ú–æ–≥—É—á–∏–º–∏ –†–µ–π–Ω–¥–∂–µ—Ä–∞–º–∏, —á—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –ø–ª–∞–Ω–µ—Ç—É.");

// –ö–ª–∞—Å—Å –†–µ–π–Ω–¥–∂–µ—Ä–∞
class Ranger {
    constructor(name, color, weapon, specialMove) {
        this.name = name;
        this.color = color;
        this.weapon = weapon;
        this.specialMove = specialMove;
        this.health = 100;
        this.nextAttackWeakness = 0; // –≠—Ñ—Ñ–µ–∫—Ç —Å–ª–∞–±–æ—Å—Ç–∏
        this.bleeding = null; // –≠—Ñ—Ñ–µ–∫—Ç –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏—è
        this.alive = true;
    }

    shout() {
        printAction(`${this.color} –†–µ–π–Ω–¥–∂–µ—Ä –≥–æ—Ç–æ–≤ –∫ –±–æ—é!`);
    }

    attack(enemy) {
        const damage = Math.floor(Math.random() * 30) + 10;
        printAction(`${this.color} –†–µ–π–Ω–¥–∂–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ${this.weapon}, –Ω–∞–Ω–æ—Å—è ${damage} —É—Ä–æ–Ω–∞!`);
        enemy.takeDamage(damage);
    }

    specialAttack(enemy) {
        const damage = Math.floor(Math.random() * 50) + 30;
        printAction(`${this.color} –†–µ–π–Ω–¥–∂–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–æ–±—É—é –∞—Ç–∞–∫—É: ${this.specialMove}, –Ω–∞–Ω–æ—Å—è ${damage} —É—Ä–æ–Ω–∞!`);
        enemy.takeDamage(damage);
    }

    takeDamage(amount) {
        if (this.nextAttackWeakness > 0) {
            amount -= this.nextAttackWeakness;
            printAction(`${this.name} –æ—Å–ª–∞–±–ª–µ–Ω! –£—Ä–æ–Ω —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ ${this.nextAttackWeakness}.`);
            this.nextAttackWeakness = 0;
        }

        this.health -= amount;
        this.health = Math.max(this.health, 0);
        printAction(`${this.name} –ø–æ–ª—É—á–∞–µ—Ç ${amount} —É—Ä–æ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å ${this.health} –∑–¥–æ—Ä–æ–≤—å—è.`);
        if (this.health <= 0) {
            this.alive = false;
            console.log(`üíÄ ${this.name} –±—ã–ª –ø–æ–±–µ–∂–¥–µ–Ω!`);
        }
    }

    applyBleedingEffect() {
        if (this.bleeding) {
            const bleedDamage = this.bleeding.damage;
            this.health -= bleedDamage;
            this.health = Math.max(this.health, 0);
            printAction(`${this.name} —Ç–µ—Ä—è–µ—Ç ${bleedDamage} –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏—è! –û—Å—Ç–∞–ª–æ—Å—å ${this.health} –∑–¥–æ—Ä–æ–≤—å—è.`);
            this.bleeding.turns--;
            if (this.bleeding.turns <= 0) {
                console.log(`${this.name} –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏—è.`);
                this.bleeding = null;
            }
        }
    }

    isAlive() {
        return this.alive;
    }
}

// –ö–ª–∞—Å—Å –∑–ª–æ–¥–µ—è
class Villain {
    constructor(name, phase) {
        this.name = name;
        this.health = phase === 1 ? 500 : 1000; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –≤–æ –≤—Ç–æ—Ä–æ–π —Ñ–∞–∑–µ
        this.phase = phase;
        this.attackPhrases = phase === 1 ? [
            { name: "–ê—Ç–∞–∫–∞ –¢—å–º—ã", damage: Math.floor(Math.random() * 40) + 10 },
            { name: "–¢–µ–Ω–µ–≤–æ–π —É–¥–∞—Ä", damage: Math.floor(Math.random() * 60) + 30 },
            { name: "–£–¥–∞—Ä —Å–∏–ª—ã", damage: 70 }
        ] : [
            { name: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–ª–æ–º", damage: 150 },
            { name: "–ö–æ–≥—Ç–∏ —Ç—å–º—ã", damage: Math.floor(Math.random() * 100) + 50 },
            { name: "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —à—Ç–æ—Ä–º", damage: Math.floor(Math.random() * 60) + 30, effect: "bleed" }
        ]; // –†–∞–∑–Ω—ã–µ –∞—Ç–∞–∫–∏ –¥–ª—è —Ñ–∞–∑
    }

    takeDamage(damage) {
        this.health -= damage;
        if (this.health <= 0) {
            this.health = 0;
        }
    }

    isDefeated() {
        return this.health <= 0;
    }

    getRandomAttack() {
        return this.attackPhrases[Math.floor(Math.random() * this.attackPhrases.length)];
    }

    attackTarget(targets) {
        const attack = this.getRandomAttack();
        let damage = attack.damage;
        console.log(`\n${this.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç "${attack.name}" –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${damage} —É—Ä–æ–Ω–∞!`);

        if (attack.effect === "bleed") {
            console.log("–¶–µ–ª—å –ø–æ—Ä–∞–∂–µ–Ω–∞ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ–º, –±—É–¥–µ—Ç —Ç–µ—Ä—è—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–¥–æ–≤!");
            targets.forEach(target => target.bleeding = { damage: Math.floor(Math.random() * 5) + 2, turns: Math.floor(Math.random() * 3) + 2 }); // –ö—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ –Ω–∞ 2-5 —Ö–æ–¥–æ–≤
        }

        targets.forEach(target => target.takeDamage(damage));
    }

    displayHealth() {
        const healthBar = '‚ñà'.repeat(this.health / 50) + '-'.repeat(20 - this.health / 50);
        console.log(`${this.name} [${healthBar}] ${this.health}/1000`);
    }
}

// –ö–ª–∞—Å—Å –ú–µ–≥–∞–∑–æ—Ä–¥–∞
class Megazord {
    constructor(rangers) {
        this.rangers = rangers;
        this.health = this.calculateHealth();
        this.alive = true;
    }

    calculateHealth() {
        return this.rangers.reduce((total, ranger) => total + ranger.health, 0);
    }

    unite() {
        printTitle("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–π–Ω–¥–∂–µ—Ä–æ–≤!");
        this.health = this.calculateHealth();
        printAction(`–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –ú–µ–≥–∞–∑–æ—Ä–¥–∞: ${this.health}`);
    }

    takeDamage(damage) {
        this.health -= damage;
        this.health = Math.max(this.health, 0);
        printAction(`–ú–µ–≥–∞–∑–æ—Ä–¥ –ø–æ–ª—É—á–∞–µ—Ç ${damage} —É—Ä–æ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å ${this.health} –∑–¥–æ—Ä–æ–≤—å—è.`);
        if (this.health <= 0) {
            this.alive = false;
            console.log("üí• –ú–µ–≥–∞–∑–æ—Ä–¥ –±—ã–ª –ø–æ–±–µ–∂–¥–µ–Ω! –†–µ–π–Ω–¥–∂–µ—Ä—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –±–∏—Ç–≤—É!");
        }
    }

    attack(enemy) {
        const damage = Math.floor(Math.random() * 100) + 50;
        printAction(`–ú–µ–≥–∞–∑–æ—Ä–¥ –Ω–∞–Ω–æ—Å–∏—Ç –º–æ—â–Ω—ã–π —É–¥–∞—Ä, –Ω–∞–Ω–æ—Å—è ${damage} —É—Ä–æ–Ω–∞!`);
        enemy.takeDamage(damage);
    }

    isAlive() {
        return this.alive;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–π–Ω–¥–∂–µ—Ä–æ–≤
const rangers = [
    new Ranger('–î–∂–µ–π—Å–æ–Ω', '–ö—Ä–∞—Å–Ω—ã–π', '–ú–µ—á —Å–∏–ª—ã', '–û–≥–Ω–µ–Ω–Ω—ã–π —É–¥–∞—Ä'),
    new Ranger('–ó–∞–∫', '–ß–µ—Ä–Ω—ã–π', '–ö–æ—Å–∞ —Ç—å–º—ã', '–¢–µ–Ω–µ–≤–æ–π —É–¥–∞—Ä'),
    new Ranger('–¢–æ–º–º–∏', '–ó–µ–ª–µ–Ω—ã–π', '–î—Ä–∞–∫–æ–Ω–∏–π –∫–ª–∏–Ω–æ–∫', '–ò–∑—É–º—Ä—É–¥–Ω—ã–π –≤–∏—Ö—Ä—å'),
    new Ranger('–ë–∏–ª–ª–∏', '–°–∏–Ω–∏–π', '–≠–ª–µ–∫—Ç—Ä–æ-—â–∏—Ç', '–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –∑–∞—Ä—è–¥'),
    new Ranger('–¢—Ä–∏–Ω–∏', '–ñ–µ–ª—Ç—ã–π', '–ö–∏–Ω–∂–∞–ª—ã —Ç–∏–≥—Ä–∞', '–ó–æ–ª–æ—Ç–æ–π –≤–∏—Ö—Ä—å'),
    new Ranger('–ö–∏–º–±–µ—Ä–ª–∏', '–†–æ–∑–æ–≤—ã–π', '–õ—É–∫ —Ñ–µ–Ω–∏–∫—Å–∞', '–ü–ª–∞–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–µ–ª–∞')
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π —Ñ–∞–∑—ã "–í–ª–∞—Å—Ç–µ–ª–∏–Ω–∞ —Ç—å–º—ã"
let villain = new Villain('–í–ª–∞—Å—Ç–µ–ª–∏–Ω —Ç—å–º—ã', 1);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ—è
function battle() {
    let megazord = null;
    while (true) {
        // –ü–æ–∫–∞–∑–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Ä–µ–π–Ω–¥–∂–µ—Ä–æ–≤
        console.log("\n–ó–¥–æ—Ä–æ–≤—å–µ –†–µ–π–Ω–¥–∂–µ—Ä–æ–≤:");
        rangers.forEach(ranger => ranger.applyBleedingEffect());
        rangers.forEach(ranger => ranger.isAlive() && ranger.takeDamage(0)); // –û–±–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Ä–µ–π–Ω–¥–∂–µ—Ä–æ–≤ –±–µ–∑ —É—Ä–æ–Ω–∞

        // –ü–æ–∫–∞–∑–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∑–ª–æ–¥–µ—è
        villain.displayHealth();

        // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π–Ω–¥–∂–µ—Ä–æ–≤ (–¥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è)
        if (!megazord) {
            let targets = rangers.filter(ranger => ranger.isAlive()).slice(0, Math.floor(Math.random() * 4) + 2); // –û—Ç 2 –¥–æ 5 —Ä–µ–π–Ω–¥–∂–µ—Ä–æ–≤
            villain.attackTarget(targets);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∂–∏–≤—ã –ª–∏ —Ä–µ–π–Ω–¥–∂–µ—Ä—ã, —á—Ç–æ–±—ã –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è
        if (rangers.every(ranger => !ranger.isAlive())) {
            console.log('\n–†–µ–π–Ω–¥–∂–µ—Ä—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ!');
            break;
        }

        // –†–µ–π–Ω–¥–∂–µ—Ä—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –ú–µ–≥–∞–∑–æ—Ä–¥–∞, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –∂–∏–≤—ã—Ö
        if (!megazord && rangers.some(ranger => ranger.isAlive())) {
            console.log('\n–†–µ–π–Ω–¥–∂–µ—Ä—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –ú–µ–≥–∞–∑–æ—Ä–¥–∞!');
            megazord = new Megazord(rangers.filter(ranger => ranger.isAlive()));
            megazord.unite();
        }

        // –ï—Å–ª–∏ –ú–µ–≥–∞–∑–æ—Ä–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –∞—Ç–∞–∫—É–µ—Ç
        if (megazord) {
            megazord.attack(villain);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–ª–æ–¥–µ—è
        if (villain.isDefeated()) {
            console.log('\n–í–ª–∞—Å—Ç–µ–ª–∏–Ω —Ç—å–º—ã –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω! –†–µ–π–Ω–¥–∂–µ—Ä—ã –ø–æ–±–µ–¥–∏–ª–∏ –ø–µ—Ä–≤—É—é —Ñ–∞–∑—É.');
            break;
        }

        // –ï—Å–ª–∏ –∑–ª–æ–¥–µ–π –≤—ã–∂–∏–≤–∞–µ—Ç, –æ–Ω –º–µ–Ω—è–µ—Ç —Ñ–∞–∑—É
        if (villain.health <= 250 && villain.phase === 1) {
            villain = new Villain('–í–ª–∞—Å—Ç–µ–ª–∏–Ω —Ç—å–º—ã', 2); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤—Ç–æ—Ä—É—é —Ñ–∞–∑—É
            console.log('\n–í–ª–∞—Å—Ç–µ–ª–∏–Ω —Ç—å–º—ã –º–µ–Ω—è–µ—Ç —Å–≤–æ—é —Ñ–æ—Ä–º—É –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ!');
        }
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—è
battle();
